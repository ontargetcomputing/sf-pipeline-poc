name: SFDX Deploy and Test on Merge

on:  push
  # pull_request:
  #   branches:
  #     - Dev
  #     - QA
  #     - UAT
  #   types: [closed]

env: 
  SFDX_AUTH_URL_Dev: force://PlatformCLI::5Aep861Bky2w54txC1sM4QxGO75KVFtLlS9gZsRiFemcS6bnnKSc.eGYDKlMyfaj7DTaZ9NyaHYKRPHVMh2vJqg@ontargetcomputing2-dev-ed.my.salesforce.com
  SFDX_AUTH_URL_QA: force://PlatformCLI::5Aep861YbQ2WNspBqGWFxSr4OuHuNAwU6kZlu3sgXZXtedtQaFhaKMKkFMVwHSHSybrOiYgOVoauSXOcnCCa5bi@nyorkcdotapa--qa.my.salesforce.com
  SFDX_AUTH_URL_UAT: force://PlatformCLI::5Aep861YbQ2WNspBqGWFxSr4OuHuNAwU6kZlu3sgXZXtedtQaFhaKMKkFMVwHSHSybrOiYgOVoauSXOcnCCa5bi@nyorkcdotapa--qa.my.salesforce.com
jobs:
  deploy:
    runs-on: ubuntu-latest
    # environment: ${{ github.ref }}
    steps:
      # - name: Show Branch
      #   run: echo Deploying and testing to ${{ github.ref }}
      - uses: actions/checkout@v2
      # - name: Determine Login Url
      #   id: login-url
      #   run: |
      #     if [[ "${{github.ref}}" == "Dev" ]]; then
      #         echo "::set-output name=sdfx_login_url::${{env.SFDX_AUTH_URL_Dev}}"
      #     elif [[ "${{github.ref}}" == "QA" ]]; then
      #         echo "::set-output name=sdfx_login_url::${{env.SFDX_AUTH_URL_QA}}"
      #     elif [[ "${{github.ref}}" == "UAT" ]]; then
      #         echo "::set-output name=sdfx_login_url::${{env.SFDX_AUTH_URL_UAT}}"
      #     else
      #         echo "There is no login url for this branch"
      #         exit 1
      #     fi
      # - name: Login URL
      #   run: echo ${{steps.login-url.outputs.sdfx_login_url}}
      # - name: Login
      #   uses: sfdx-actions/setup-sfdx@v1
      #   with:
      #     # sfdx-auth-url: ${{ secrets.SFDX_AUTH_URL }}
      #     sfdx-auth-url: ${{steps.login-url.outputs.sdfx_login_url}}
      # - name: Get PR labels
      #   id: pr-labels
      #   uses: joerick/pr-labels-action@v1.0.6
      # - uses: begedin/variable-regex-extractor-action@v0.2.1
      #   if: env.GITHUB_PR_LABEL_TEST_SPECIFIED == '1'
      #   id: tests
      #   with:
      #     pattern: |
      #       #BEGIN_TESTS([\s\S]*)#END_TESTS
      # - name: Determine Named Tests
      #   if: env.GITHUB_PR_LABEL_TEST_SPECIFIED == '1'
      #   id: tests-cooked
      #   run: |
      #     echo "${{steps.tests.outputs.value}}"
      #     tests_list="${{steps.tests.outputs.value}}"
      #     tests_list=`echo $tests_list | tr '\n' ' '`
      #     tests_list=`echo $tests_list | tr '\r' ' '`
      #     tests_list=`echo $tests_list | sed 's/ *$//g'`
      #     echo "::set-output name=tests-cooked::$tests_list"
      - name: Deploy
        id: deploy
        run: |
            returnvalue=failed
            # echo DEPLOYING
            # if [ -n "$GITHUB_PR_LABEL_TEST_NONE" ]; then
            #   echo "'test none' label found.  No tests being run"
            #   sfdx force:source:deploy -x "manifest/package.xml" -l NoTestRun -w 33 --verbose --loglevel fatal || returnvalue=failed
            # elif [ -n "$GITHUB_PR_LABEL_TEST_ALL" ]; then
            #   echo "'test all' label found.  Running all tests"
            #   sfdx force:source:deploy -x "manifest/package.xml" -l RunAllTestsInOrg -w 33 --verbose --loglevel fatal || returnvalue=failed
            # elif [ -n "$GITHUB_PR_LABEL_TEST_LOCAL" ]; then
            #   echo "'test local' label found.  Running local tests"
            #   sfdx force:source:deploy -x "manifest/package.xml" -l RunLocalTests -w 33 --verbose --loglevel fatal || returnvalue=failed
            # elif [ -n "$GITHUB_PR_LABEL_TEST_SPECIFIED" ]; then
            #   echo "'test specified' label found.  Running specified tests"
            #   sfdx force:source:deploy -x "manifest/package.xml" -l RunSpecifiedTests -r ${{steps.tests-cooked.outputs.tests-cooked}} -w 33 --verbose --loglevel fatal || returnvalue=failed
            # else
            #   echo "No Testing Label"
            #   echo "Default to test local"
            # fi

            echo "::set-output name=sfdx_result::$returnvalue"
      - name: Roll Back
        if: steps.deploy.outputs.sfdx_result == 'failed'
        run: |
          echo "FAILED WILL ROLL BACK"
          git status
          git reset --hard HEAD^
          # git push -f origin UAT1        
          exit 1
      - name: Roll Back Not Happening
        if: steps.deploy.outputs.sfdx_result == 'succeeded'
        run: |
          echo "SUCCEEDED"